var nejsExtension=(()=>{var m=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var w=Object.prototype.hasOwnProperty;var $=(n,t)=>{for(var e in t)m(n,e,{get:t[e],enumerable:!0})},x=(n,t,e,i)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of b(t))!w.call(n,s)&&s!==e&&m(n,s,{get:()=>t[s],enumerable:!(i=y(t,s))||i.enumerable});return n};var v=n=>x(m({},"__esModule",{value:!0}),n);var P={};$(P,{Errors:()=>j,Extension:()=>g,Patch:()=>d,PatchEntry:()=>l,PatchToggle:()=>u});var A=n=>/(\w+)]/.exec(Object.prototype.toString.call(n))[1],p=class extends Error{constructor(t,e){super(`${A(t)} disallows tampering with ${e}.`),Object.assign(this,{owner:t,key:e})}get[Symbol.toStringTag](){return this.constructor.name}};var E=n=>/(\w+)]/.exec(Object.prototype.toString.call(n))[1],h=class extends Error{constructor(t,e){super(`${E(t)} does not have a property named '${e}'.`),Object.assign(this,{owner:t,key:e})}get[Symbol.toStringTag](){return this.constructor.name}};var u=class{constructor(t,e=!1){this.started=!1,this.preventRevert=e,this.patch=t,this.patchName=t.owner?.name??t.owner?.constructor?.name??/(\w+)]/.exec(Object.prototype.toString.call(t.owner))[1],this.state={needsApplication:!1,needsReversion:!1}}start(){return this.started||(this.state.needsApplication=!this.patch.applied,this.state.needsReversion=this.patch.applied,this.started=!0,this.state.needsApplication&&this.patch.apply()),this}stop(){return this.started&&((this.preventRevert||this.patch.applied)&&this.patch.revert(),this.state.needsApplication=!1,this.state.needsReversion=!1,this.started=!1),this}get[Symbol.toStringTag](){return`${this.constructor.name}:${this.patchName}`}[Symbol.for("nodejs.util.inspect.custom")](t,e,i){let s=this[Symbol.toStringTag],r=`(started: ${this.started} needed: ${this.state.needsApplication})`;return i(`${s} ${r}`,{...e,depth:t})}};var l=class{constructor(t,e=globalThis,i=void 0){let s=c=>c==null,r=(c,f=["string","symbol"])=>!s(c)&&!!f.find(a=>a===typeof c),o=c=>r(c,["object"]);if(!r(t))throw console.error("Property",t,`(type: ${typeof t})`,"owningObject",e,`(type: ${typeof e})`,"condition",i,`(type: ${typeof i})`),new TypeError("Property must be non-null and either a string or symbol");if(!o(e))throw new TypeError("Cannot create Patch entry as owning object is invalid");Object.assign(this,{key:t,descriptor:Object.getOwnPropertyDescriptor(e,t),owner:e,condition:typeof i=="function"?i:void 0})}get computed(){return this.isAccessor?this.descriptor.get.bind(this.owner).call():this.descriptor.value}get isData(){return Reflect.has(this.descriptor,"value")}get isAccessor(){return Reflect.has(this.descriptor,"get")}get isReadOnly(){return Reflect.has(this.descriptor,"configurable")&&!this.descriptor.configurable||Reflect.has(this.descriptor,"writable")&&!this.descriptor.writable}get isAllowed(){return this.condition&&typeof this.condition=="function"?this.condition():!0}get[Symbol.toStringTag](){return this.constructor.name}[Symbol.for("nodejs.util.inspect.custom")](t,e,i){let s=this.isData?" Data":" Accessor",r=this.isReadOnly?" [ReadOnly]":"";return`PatchEntry<${this.key}${s}${r}>`}};var d=class n{patchConflicts={};patchEntries={};patchesOwner=void 0;patchCount=0;patchesApplied=0;constructor(t,e,i={}){Object.assign(this,{owner:t,options:i}),this.patchesOwner=e;let s=this?.options.condition;Reflect.ownKeys(e).forEach(r=>{let o=this?.options?.conditions?.[r]??s;try{this.patchEntries[r]=new l(r,this.patchesOwner,o),this.patchCount+=1}catch(c){console.error(`Failed to process patch for ${r}
`,c)}if(Reflect.has(this.owner,r))try{this.patchConflicts[r]=new l(r,this.owner)}catch(c){console.error(`Cannot capture conflicting patch key ${r}
`,c)}}),n.patches.has(t)||n.patches.set(t,[]),n.patches.get(t).push(this)}get entries(){return Reflect.ownKeys(this.patchEntries).map(t=>[t,this.patchEntries[t]])}get patches(){return this.entries.reduce((t,[e,i])=>(t[e]=i.computed,t),{})}get patchKeys(){return this.entries.map(([t,e])=>t)}get conflicts(){return Reflect.ownKeys(this.patchConflicts).map(t=>[t,this.patchConflicts[t]])}get applied(){return this.patchesApplied>0}get isPartiallyPatched(){return this.applied}get isFullyPatched(){return this.patchCount==this.patchesApplied}apply(t){let e=this.entries,i={patches:e.length,applied:0,errors:[],notApplied:e.length};e.forEach(([,s])=>{if(s.isAllowed){Object.defineProperty(this.owner,s.key,s.descriptor);let r=Object.getOwnPropertyDescriptor(this.owner,s.key);this.#t(r,s.descriptor)?(i.applied+=1,i.notApplied-=1):i.errors.push([s,new Error(`Could not apply patch for key ${s.key}`)])}}),this.patchesApplied=i.applied,typeof t=="function"&&t(i)}createToggle(t=!1){return new u(this,t)}revert(t){if(!this.applied)return;let e=this.entries,i=this.conflicts,s={patches:e.length,reverted:0,restored:0,conflicts:i.length,errors:[],stillApplied:0};e.forEach(([,r])=>{delete this.owner[r.key]?(this.patchesApplied-=1,s.reverted+=1):s.errors.push([r,new Error(`Failed to revert patch ${r.key}`)])}),i.forEach(([,r])=>{Object.defineProperty(this.owner,r.key,r.descriptor);let o=Object.getOwnPropertyDescriptor(this.owner,r.key);this.#t(r.descriptor,o)?s.restored+=1:s.errors.push([r,new Error(`Failed to restore original ${r.key}`)])}),s.stillApplied=this.patchesApplied,typeof t=="function"&&t(s)}release(){let t=n.patches.get(this.owner);t.splice(t.find(e=>e===this),1)}owner=null;options=null;#t(t,e){return!t||!e?!1:t.configurable===e.configurable&&t.enumerable===e.enumerable&&t.value===e.value&&t.writable===e.writable&&t.get===e.get&&t.set===e.set}[Symbol.for("nodejs.util.inspect.custom")](t,e,i){let s={get quotes(){return/^(\x1B\[\d+m)?['"]|["'](\x1B\[\d+m)?$/g},get arrays(){return/^(\x1B\[\d+m)?\[ | \](\x1B\[\d+m)?$/g}},r={...e,depth:t},o=this.owner?.name??"",c=o.length?`[${i(o,e).replaceAll(s.quotes,"$1$2")}]`:"",f=i(this.patchKeys,r).replaceAll(s.arrays,"$1$2").replaceAll(/'(.*?)'/g,"$1");return`${this.constructor.name}${c} { ${f} }`}static patches=new Map;static enableFor(t){if(n.patches.has(t))for(let e of n.patches.get(t))e.apply()}static disableFor(t){if(n.patches.has(t))for(let e of n.patches.get(t))e.revert()}};var S=["number","boolean","bigint","string","symbol"],g=class n extends d{constructor(t,e,i=globalThis,s={}){let r=n.determineInput(t),{key:o,extension:c,valid:f}=r;if(c=e||c,!f)throw new h(i,o);let a=Object.getOwnPropertyDescriptor(i,o);if(a&&(Reflect.has(a,"writable")&&!a.writable||Reflect.has(a,"configurable")&&!a.configurable))throw new p(i,o);super(i,{[o]:c},s),this.key=o,this.class=r.class,this.function=r.function}get isFunction(){return!!this.function}get isClass(){return!!this.class}get isPrimitive(){return~S.indexOf(typeof this.value)}get isObject(){return Object(this.value)===this.value}static determineInput(t){let e={key:null,extension:null,valid:!1};return t instanceof Function?(e={key:t.name,extension:t,valid:!0},/^class .*/.exec(t.toString())&&(e.class=t),/^(async )?function .*/.exec(t.toString())&&(e.function=t)):(typeof t=="string"||t instanceof String)&&(e={key:t,extension:null,valid:!0}),e}[Symbol.for("nodejs.util.inspect.custom")](t,e,i){let s={get braces(){return/^(\x1B\[\d+m)?[\[\{]|[\]\}](\x1B\[\d+m)?$/g},get quotes(){return/^(\x1B\[\d+m)?['"]|["'](\x1B\[\d+m)?$/g}},r=i(this.key,e).replaceAll(s.quotes,"$1$2"),o=i(this.patches[this.key],e).replaceAll(s.braces,"$1$2");return`Extension[${r}:${o}]`}get[Symbol.toStringTag](){return this.constructor.name}};var j={get CannotBeExtended(){return p},get MissingOwnerValue(){return h}};return v(P);})();
//# sourceMappingURL=extension.bundle.2.2.0.js.map
